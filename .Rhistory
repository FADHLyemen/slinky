where
devtools::test()
devtools::test()
.self$.fetch("genes", fields, where, cl)
fields
where
devtools::test()
res$url
class(where)
where
query = list(where=jsonlite::toJSON(where, auto_unbox = TRUE), user_key=user_key)
query
library(clue)
library(clue)
devtools::test()
Sys.setenv(CLUE_API_KEY="db1db72b80bcb8ed812a2a7af0198bbb")
devtools::test()
content(res)$count
res$url
where_clause
devtools::test()
where_clause
devtools::test()
res$url
content(res)
URLdecode(res$url)
devtools::test()
content$res
content(res)
devtools::test()
View(tt)
nrow(tt)
nrow(tt) == 1
library(clue)
devtools::test()
library(clue)
devtools::test()
library(clue)
devtools::test()
library(clue)
library(clue)
devtools::test()
devtools::test()
str(tt)
devtools::test()
devtools::test()
ceiling(1/1000)
devtools::test()
devtools::test()
tt
devtools::test()
devtools::test()
tt
devtools::test()
tt
devtools::test()
count
tt
count
count
names(dat)
cn <- names(dat)
dat <- matrix(unlist(dat), nrow=nrow(dat))
colnames(dat) <- cn
str(dart)
str(dat)
dat[1,]
names(dat)
cn
ncol(dat)
nrow(dat)
devtools::test()
ncol(dat)
nrow(dat)
tt <- matrix(unlist(dat), nrow=nrow(dat))
str(tt)
View(tt)
View(dat)
devtools::test()
?makeCluster
devtools::test()
tt[1,]
tt[1,1] == "3638"
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(clue)
devtools::test()
tt[1.]
tt[1,]
tt[1,2]
View(tt)
as.data.frame(tt)[1,2]
data.frame(tt)[1,2]
unlist(tt)
unlist(tt)[1,2]
t3 <- tt
t3$gene_symbol <- unlist(t3$gene_symbol)
t3[1,2]
t3 <- apply(tt, 1, unlist)
View(t3)
t3 <- apply(tt, 2, unlist)
View(t3)
unlist(tt$gene_family)[,1]
unlist(tt$gene_family)[1]
unlist(tt$gene_family)
tt$entrez_id
tt$entrez_id[1]
as.data.framt(tt)$entrez_id[1]
as.data.frame(tt)$entrez_id[1]
tt[1,2] == "INSIG1"
tt[1,2][[1]] == "INSIG1"
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?foreach
devtools::test()
str(tt)
devtools::test()
length(tt)
tt[[1]][1]
tt[[1]][1,1'']
tt[[1]][1,1]
names(tt)
names(tt[[1]])
q()
??rbind.fill
install.packages("plyr")
library(plyr)
?rbind.fill
devtools::test()
View(tt)
devtools::test()
View(tt)
combine
devtools::test()
View(tt)
tt[2,]
devtools::test()
tt[[1]][1,]
tt[[1]][2,]
devtools::test()
devtools::test()
library(clue)
devtools::test()
tt[[1]][1]
tt[[1]][1,1]
View(tt)
names(tt)
length(tt)
View(tt[[1]])
library(clue)
devtools::test()
View(tt)
devtools::test()
View(tt)
library(clue)
devtools::test()
View(t)
View(tt)
devtools::test()
View(tt)
tt[1,2]
tt[1,1]
devtools::test()
tt[1,1]
tt[1,2]
expect_equal(tt[1,2], "FAM200B")
devtools::test()
devtools::test()
?test_that
??testthat
library(clue)
library(clue)
library(clue)
library(clue)
library(clue)
library(clue)
devtools::document()
library(clue)
Clue$new()
library(cluer)
library(slinky)
library(slinky)
devtools::document(roclets=c('rd', 'collate', 'namespace'))
library(slinky)
library(slinky)
devtools::document(roclets=c('rd', 'collate', 'namespace'))
library(slinky)
library(slinky)
?Slinky
library(slinky)
library(slinky)
?genes
?Slinky
library(slinky)
?genes
library(slinky)
library(slinky)
?genes
?Slinky
library(slinky)
?genes
library(slinky)
?Slinky
library(slinky)
?Slinky
library(slinky)
?Slinky
library(slinky)
?Slinky
library(slinky)
?Slinky
library(slinky)
?Slinky
library(slinky)
?Slinky
library(slinky)
?Slinky
?Slinky
library(slinky)
Sys.setenv(CLUE_API_KEY="db1db72b80bcb8ed812a2a7af0198bbb")
library(slinky)
testthat::auto_test()
testthat::auto_test("R/", "tests/testthat/")
View(tt)
tt[1,]
tt[1,1]
sl <- Slinky$new()
library(slinky)
sl <- Slinky$new()
sl <- Slinky$new()
library(slinky)
sl <- Slinky$new()
sl <- slinky$new()
?Slinky
sl <- Slinky$new()
library(slinky)
sl <- Slinky$new()
library(slinky)
sl <- Slinky$new()
sl$.count("genes", where_clause=list(gene_symbol="TP53"))
tt <- sl$.fetch("genes", fields=c("entrez_id"), limit=1)
tt
tt <- sl$.fetch("genes", fields=c("entrez_id", "gene_symbol"), limit=10)
tt
testthat::test_file("tests/testthat/test.R")
tt <- sl$.fetch("genes", where_clause=list(gene_symbol="TP53"), limit=10)
TT
tt
tt <- sl$.fetch("genes", where_clause=list(gene_symbol="TP53"))
tt
nrow(tt)
tt <- sl$genes(where_clause=list(gene_symbol="TP53"))
testthat::auto_test("R/", "tests/testthat/")
tt
nrow(tt)
testthat::auto_test("R/", "tests/testthat/")
??rbind.fill
library(slinky)
tt <- sl$.fetch("cells", limit=1)
tt <- sl$.count("cells")
tt
tt <- sl$.fetch("cells", limit=2)
tt <- sl$.fetch("cells", limit=2)
tt <- sl$.fetch("genes", limit=2)
tt
source('~/slinky/R/slinky.R')
tt <- sl$.fetch("cells", limit=2)
tt <- sl$.fetch("cells", limit=2)
ls()
a
i
res
source('~/slinky/R/slinky.R')
tt <- sl$.fetch("cells", limit=2)
tt <- sl$.fetch("genes", limit=2)
sl$.count("cells")
tt <- sl$.fetch("genes", limit=2)
tt <- sl$.fetch("profiles", limit=2)
tt
tt <- sl$.fetch("cells", limit=2)
tt <- sl$.fetch("cell", limit=2)
cels
cells
source('~/slinky/R/slinky.R')
tt <- sl$.fetch("cell", limit=2)
library(slinky)
source('~/slinky/R/slinky.R')
sl <- Slinky$new()
sl$cells(limit=1)
rm(list=ls())
library(slinky)
sl <- Slinky$new(); sl$cells(limit=1)
ls()
i
fields
if(i * 1000 > limit & limit > 0) {
lim_filter <- limit %% 1000
}
res <- GET(url = .self$.base,
path=paste0("api/", path, "/"),
query = list(filter=jsonlite::toJSON(list(fields=fields,
limit=lim_filter,
where=where_clause,
skip=(i-1)*1000),
auto_unbox = TRUE),
user_key=user_key))
cat(URLdecode(res$url))
content(res)
str(dat)
tt <- do.call("rbind.fill", lapply(content(res, as="parsed"), as.data.frame, stringsAsFactors=FALSE))
tt <- lapply(content(res, as="parsed"), as.data.frame, stringsAsFactors=FALSE)
tt <- content(res, as="parsed")
str(tt)
View(tt)
lapply(tt, as.data.frame)
tt[[1]]
tt[[2]]
length(tt)
length(tt[[1]])
lapply(tt[[1]], as.data.frame)
sink("output.json")
content(res)
sink()
sink("output.json")
content(res, as = "text")
sink("output.json")
sink("output.json")
cat(content(res, as = "raw"))
sink("output.json")
sink()
sink()
sink("output.json")
cat(content(res, as = "text"))
sink()
str(tt)
sink()
library(slinky)
sl <- Slinky$new(); sl$genes(limit=1)
sink("genes.rob")
str(content(res, as="parsed")); sink();
sl$cells(limit=1)
sink("cells.rob")
str(content(res, as="parsed")); sink();
sl$cells(limit=1)
lapply(content(res, as="parsed"), rbind.fill)
lapply(content(res, as="parsed"), as.data.frame)
lapply(content(res, as="parsed"), cat)
library(data.table)
rbindlist(mylist, fill=TRUE)
q
install.packages("datatable")
setRepositories(c(1,2,3,4,5))
install.packages("datatable")
setRepositories()
install.packages("datatable")
install.packages("data.table")
sl$cells(limit=1)
library(data.table)
rbindlist(content(res, as="parsed"), fill=TRUE)
lapply(content(res, as="parsed"), rbindlist)
as.data.frame(content(res, as="parsed")[[1]]
)
as.data.frame(content(res, as="parsed")[[1]][[1]])
as.data.frame(content(res, as="parsed")[[1]][[2]])
as.data.frame(content(res, as="parsed")[[1]][[3]])
as.data.frame(content(res, as="parsed")[[1]][[5]])
as.data.frame(content(res, as="parsed")[[1]][[7]])
as.data.frame(content(res, as="parsed")
)
as.data.frame(content(res, as="parsed"))
as.data.frame(content(res, as="parsed"), check.names=FALSE)
as.data.frame(content(res, as="parsed"), check.names=FALSE)
library(reshape2)
library(slinky)
sl <- Slinky$new(); sl$genes(limit=1)
sl$cells(fields=c("cell_iname", "cell_name"), limit=1)
sl$cells(fields=c("cell_iname", "cell_name"), limit=2)
library(slinky)
sl <- Slinky$new(); sl$genes(limit=1)
sl$cells(fields=c("cell_iname", "cell_name"), limit=2)
content(res)
str(content(res))
URLdecode(res$url)
cat(URLdecode(res$url))
tt <- content(res, as="parsed")
lapply(tt[[1]], unlist)
tt[[1]]
lapply(tt[[1]], unlist)
lapply(tt, function(x) { lapply(x, unlist) }
)
lapply(lapply(tt, function(x) { lapply(x, unlist) }, as.data.frame))
lapply(lapply(tt, function(x) { lapply(x, unlist) }), as.data.frame)
lapply(lapply(tt, function(x) { lapply(x, unlist) }), rbind)
unlist(1)
as.data.frame(lapply(lapply(tt, function(x) { lapply(x, unlist) }), rbind))
View)as.data.frame(lapply(lapply(tt, function(x) { lapply(x, unlist) }), rbind)))
View(as.data.frame(lapply(lapply(tt, function(x) { lapply(x, unlist) }), rbind)))
t3 <- lapply(lapply(tt, function(x) { lapply(x, unlist) }), rbind))
t3 <- lapply(lapply(tt, function(x) { lapply(x, unlist) }), rbind)
View(t3)
lapply(tt, function(x) { lapply(x, unlist) }
)
lapply(tt, function(x) { lapply(x, unlist) })
t3 <- lapply(tt, function(x) { lapply(x, unlist) })
str(t3)
lapply(t3, rbind.fill)
lapply(t3, as.data.frame)
as.data.frame(tt[[1]])
data.frame(tt[[1]])
t3
tt
str(t3)
as.data.frame(t3[[1]])
t3[[1]]
str(tt)
t3
is.null(t3)
lapply(t3, is.null)
do.call(rbind, t3)
t3 <- lapply(tt, function(x) { lapply(x, unlist) })
do.call("rbind.fill", t3)
do.call("rbind.fill", t3)
do.call("rbind", t3)
library(slinky)
sl <- Slinky$new(); sl$genes(limit=1)
library(slinky)
sl <- Slinky$new(); sl$genes(limit=1)
library(slinky)
sl <- Slinky$new(); sl$cells(limit=2)
do.call("rbind", t3)
str(t3)
do.call("rbind.fill", lapply(t3, as.data.frame, stringsAsFactors=FALSE))
t3
View(t3)
View(do.call("rbind", t3))
t3
t4 <- do.call("rbind", t3)
as.data.frame(t4)
library(slinky)
sl <- Slinky$new(); sl$cells(limit=2)
sl <- Slinky$new(); sl$genes(limit=2)
library(slinky)
sl <- Slinky$new(); sl$genes(limit=2)
class(t3)
t3[[1]]
t3[[2]]
lapply(t3, as.data.frame)
rbind.fill(lapply(t3, as.data.frame))
sl$cells(limit=2)
rbind.fill(lapply(t3, as.data.frame))
lapply(t3, as.data.frame)
t3
View(t3)
str(t3)
paste(t3[[1]])
t3[[1]]
paste(t3[[1]], sep = ",")
cat(t3[[1]])
lapply(t3[[1]], paste)
lapply(t3[[1]], paste, collapse=".")
lapply(t3[[1]], paste, collapse="|")
lapply(t3, paste, collapse="|")
t4 <- lapply(t3, function(x) { lapply(x, paste, collapse="|")})
t4
rbind.fill(lapply(t4, as.data.frame))
library(slinky)
sl <- Slinky$new(); sl$genes(limit=2)
sl$cells(limit=2)
View(sl$cells(limit=2))
View(sl$cells(fields=c("cell_id", "cell_iname", limit=2))
)
View(sl$cells(fields=c("cell_id", "cell_iname"), limit=2))
library(slinky)
sl <- Slinky$new()
expect_equal(nrow(tt), 10)
tt <- sl$.fetch("genes", fields=c("entrez_id", "gene_symbol"), limit=10)
tt
str(tt)
library(slinky)
sl <- Slinky$new()
tt <- sl$cells(fields=c("cell_iname", "cell_lineage"),
where_clause=list(cell_lineage=list(name="skin")))
library(slinky)
sl <- Slinky$new()
tt <- sl$cells(fields=c("cell_iname", "cell_lineage"),
where_clause=list(cell_lineage=list(name="skin")))
tt
library(slinky)
sl <- Slinky$new()
tt <- sl$cells(fields=c("cell_iname", "cell_lineage"),
where_clause=list(cell_lineage=list(name="skin")))
library(slinky)
sl <- Slinky$new()
tt <- sl$cells(fields=c("cell_iname", "cell_lineage"),
where_clause=list(cell_lineage=list(name="skin")))
rm(list=ls())
library(slinky)
tt <- sl$cells(fields=c("cell_iname", "cell_lineage"),
where_clause=list(cell_lineage=list(name="skin")))
sl <- Slinky$new()
sl$cells(fields=c("cell_iname", "cell_lineage"),
where_clause=list(cell_lineage=list(name="skin")))
library(slinky)

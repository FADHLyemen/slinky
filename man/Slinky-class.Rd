% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slinky.R
\docType{class}
\name{Slinky-class}
\alias{Slinky-class}
\alias{Slinky}
\title{A Reference Class to encapsulate LINCS methods}
\description{
A Reference Class to encapsulate LINCS methods
}
\section{Fields}{

\describe{
\item{\code{.user_key}}{private field populated at instantiation}

\item{\code{.base}}{private field populated at instantiation}
}}

\section{Methods}{

\describe{
\item{\code{count(path, where_clause = "")}}{Wrapper for Slinky.io REST calls to retrieve record counts
\subsection{Parameters}{
\itemize{
\item{\code{path} The endpoint to query.}
\item{\code{fields} Optional vector of fields to return.}
\item{\code{where_clause} Optional where_clause clause.  Must be named list (e.g. list(field='value')}
}}
\subsection{Return Value}{Count of records satisfying query}}

\item{\code{fetch(path, fields = "", where_clause = "", limit = 0, count = FALSE,
  cl = NULL)}}{Wrapper for Slinky.io REST calls
\subsection{Parameters}{
\itemize{
\item{\code{path} The endpoint to query.}
\item{\code{fields} Optional vector of fields to return.}
\item{\code{where_clause} Optional where_clause clause.  Must be named list (e.g. list(field='value')}
\item{\code{cl} Optional cluster object to parallelize data retrieval.}
}}
\subsection{Return Value}{Data returned by Slinky.api as a data.frame}}

\item{\code{gctx.colnames(file, index = NULL)}}{Retrieve column names from LINCS gctx datafile
\subsection{Parameters}{
\itemize{
\item{\code{file} Path to gctx file.}
\item{\code{index} Optional list providing which colnames to return.}
}}
\subsection{Return Value}{Names of columns from gctx file}
\subsection{Details}{The gctx file is an HDF5 formatted file with several sections (groups) containing the column and
row level metadata as well as the expression data itself.  If `index` is provided, it should be a list of extent one providing 
a vector of column indices for which to retrn ids.  For example, index=list(c(1,2,3,10)).}}

\item{\code{gctx.read(file, index = NULL)}}{Read portions of data matrix from LINCS gctx datafile
\subsection{Parameters}{
\itemize{
\item{\code{file} Path to gctx file.}
\item{\code{index} list of extent 2 providing which columns and rows to return.  Since the LINCS datasets are relatively
massive, the index argument is required to avoid inadvertently trying to slurp the entire dataset into memory.}
}}
\subsection{Return Value}{Matrix of expression data with rownames and colnames appropriately set}}

\item{\code{gctx.rownames(file, index = NULL)}}{Retrieve rown names from LINCS gctx datafile
\subsection{Parameters}{
\itemize{
\item{\code{file} Path to gctx file.}
\item{\code{index} Optional list providing which rownames to return.}
}}
\subsection{Return Value}{Names of rows from gctx file}
\subsection{Details}{The gctx file is an HDF5 formatted file with several sections (groups) containing the column and
row level metadata as well as the expression data itself.  If `index` is provided, it should be a list of extent one providing 
a vector of row indices for which to retrn ids.  For example, index=list(c(1,2,3,10)).}}

\item{\code{score(data, method, ...)}}{Provide a uniform interface to scoring functions.
\subsection{Parameters}{
\itemize{
\item{\code{data} Matrix of expression data to score. }
\item{\code{method} Scoring method to use.  Only \code{ks} is presently supported.}
\item{\code{...} Additional arguments for \code{method}.}
}}
\subsection{Return Value}{Vectors of scores, one per column of data}}
}}

